const { Telegraf, Markup } = require('telegraf');
const { Sequelize, DataTypes } = require('sequelize');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const sequelize = new Sequelize('bddvvx5uepfk7vo0almc', 'ual3odet1pi3ftpn', 'yeaGgGxFe0dCTwkhmCdZ', {
    host: 'bddvvx5uepfk7vo0almc-mysql.services.clever-cloud.com',
    dialect: 'mysql',
    port: 3306,
    logging: false, // –í–∏–º–∫–Ω—É—Ç–∏ SQL-–ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—ñ
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
sequelize.authenticate()
    .then(() => console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'))
    .catch((err) => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', err));

// –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
const Performance = sequelize.define('performance', {
    id: { type: DataTypes.BIGINT.UNSIGNED, primaryKey: true, autoIncrement: true },
    title: DataTypes.STRING,
    duration: DataTypes.INTEGER,
    image: DataTypes.STRING,
}, {
    timestamps: false,
});

// User model
const User = sequelize.define('User', {
    id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
    name: { type: DataTypes.STRING, allowNull: false },
    email: { type: DataTypes.STRING, allowNull: false, unique: true },
    email_verified_at: { type: DataTypes.DATE, allowNull: true },
    password: { type: DataTypes.STRING, allowNull: false },
    remember_token: { type: DataTypes.STRING, allowNull: true },
    created_at: { type: DataTypes.DATE, allowNull: false, defaultValue: DataTypes.NOW },
    updated_at: { type: DataTypes.DATE, allowNull: false, defaultValue: DataTypes.NOW },
    age: { type: DataTypes.INTEGER, allowNull: true },
    phone_numbers: { type: DataTypes.STRING, allowNull: false }, // –ü–æ–ª–µ –¥–ª—è –Ω–æ–º–µ—Ä—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
    status: { type: DataTypes.STRING, allowNull: true }
}, {
    tableName: 'users', // –ó–∞–º—ñ—Å—Ç—å 'Users' –≤–∫–∞–∑–∞–Ω–æ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –≤ –ë–î
    timestamps: false    // –Ø–∫—â–æ –≤–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ–ª—è created_at —ñ updated_at
});



const Ticket = sequelize.define('Ticket', {
    id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
    ticket_number: { type: DataTypes.STRING, allowNull: false },
    date: { type: DataTypes.DATE, allowNull: false },
    time: { type: DataTypes.TIME, allowNull: false },
    show_id: { type: DataTypes.INTEGER, allowNull: false },
    seat_id: { type: DataTypes.STRING, allowNull: false },
    user_id: { type: DataTypes.INTEGER, allowNull: false },
    price: { type: DataTypes.FLOAT, allowNull: false },
    discount_id: { type: DataTypes.INTEGER, allowNull: true },
    created_at: { type: DataTypes.DATE, allowNull: false, defaultValue: DataTypes.NOW },
    updated_at: { type: DataTypes.DATE, allowNull: false, defaultValue: DataTypes.NOW },
}, {
    tableName: 'tickets', // –¢–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    timestamps: false,    // –Ø–∫—â–æ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–ª–∞—Å–Ω—ñ –ø–æ–ª—è created_at —ñ updated_at
});


const Hall = sequelize.define('hall', {
    id: { type: DataTypes.BIGINT.UNSIGNED, primaryKey: true, autoIncrement: true },
    hall_number: DataTypes.INTEGER,
}, {
    timestamps: false,
});

const Genre = sequelize.define('genre', {
    id: { type: DataTypes.BIGINT.UNSIGNED, primaryKey: true, autoIncrement: true },
    name: DataTypes.STRING,
}, {
    timestamps: false,
});

const Actor = sequelize.define('actor', {
    id: { type: DataTypes.BIGINT.UNSIGNED, primaryKey: true, autoIncrement: true },
    first_name: DataTypes.STRING,
    last_name: DataTypes.STRING,
}, {
    timestamps: false,
});

// –ú–æ–¥–µ–ª—ñ –¥–ª—è –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π
const PerformanceGenre = sequelize.define('performance_genre', {
    performance_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Performance, key: 'id' } },
    genre_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Genre, key: 'id' } }
}, {
    timestamps: false,
});

const Show = sequelize.define('show', {
    id: { type: DataTypes.BIGINT.UNSIGNED, primaryKey: true, autoIncrement: true },
    performance_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Performance, key: 'id' } },
    datetime: DataTypes.DATE,
    price: DataTypes.FLOAT,
    hall_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Hall, key: 'id' } },
    created_at: {
        type: DataTypes.DATE,
        field: 'created_at',
    },
    updated_at: {
        type: DataTypes.DATE,
        field: 'updated_at',
    },
}, {
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at',
});

const PerformanceActor = sequelize.define('performance_actor', {
    performance_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Performance, key: 'id' } },
    actor_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Actor, key: 'id' } }
}, {
    timestamps: false,
    tableName: 'performance_actor' // –í–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è —Ç–∞–±–ª–∏—Ü—ñ
});

// User Model
User.hasMany(Ticket, { foreignKey: 'user_id' });
Ticket.belongsTo(User, { foreignKey: 'user_id' });

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π –º—ñ–∂ –º–æ–¥–µ–ª—è–º–∏

Performance.belongsToMany(Genre, { through: PerformanceGenre, foreignKey: 'performance_id' });
Genre.belongsToMany(Performance, { through: PerformanceGenre, foreignKey: 'genre_id' });

Performance.belongsToMany(Actor, { through: PerformanceActor, foreignKey: 'performance_id' });
Actor.belongsToMany(Performance, { through: PerformanceActor, foreignKey: 'actor_id' });

Performance.hasMany(Show, { foreignKey: 'performance_id' });
Show.belongsTo(Performance, { foreignKey: 'performance_id' });

Hall.hasMany(Show, { foreignKey: 'hall_id' });
Show.belongsTo(Hall, { foreignKey: 'hall_id' });

Ticket.belongsTo(Show, { foreignKey: 'show_id' });
Show.hasMany(Ticket, { foreignKey: 'show_id' });

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
const bot = new Telegraf('7355998053:AAFzF4962NSnBzkdLOkcAV1gB0nYq0u6qfk'); // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

bot.command('start', async (ctx) => {
    const menu = Markup.keyboard([
        ['üé≠ –í–∏—Å—Ç–∞–≤–∏', 'üé¨ –ñ–∞–Ω—Ä–∏'],
        ['üë®‚Äçüé§ –ê–∫—Ç–æ—Ä–∏', 'üìÖ –ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ –¥–∞—Ç—ñ'],
        ['üéü –ú–æ—ó –∫–≤–∏—Ç–∫–∏']
    ]).resize();
    await ctx.reply('–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–∏—Ö –∫–≤–∏—Ç–∫—ñ–≤! –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:', menu);
});

bot.hears('üéü –ú–æ—ó –∫–≤–∏—Ç–∫–∏', async (ctx) => {
    await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–≤–∏—Ç–∫—ñ–≤:',
        Markup.keyboard([
            Markup.button.contactRequest('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º')
        ]).resize().oneTime());
});

bot.on('contact', async (ctx) => {
    const phoneNumber = ctx.message.contact.phone_number;


    try {
        const tickets = await Ticket.findAll({
            include: [
                {
                    model: Show,
                    include: [Performance, Hall],
                },
                {
                    model: User,
                    where: { phone_numbers: phoneNumber },
                    attributes: [],
                },
            ],
        });

        if (tickets.length === 0) {
            return ctx.reply('–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–≤–∏—Ç–∫—ñ–≤.');
        }

        for (const ticket of tickets) {
            const showDate = new Date(ticket.show.datetime).toLocaleString('uk-UA');
            const message = `üé´ –í–∞—à –∫–≤–∏—Ç–æ–∫:\n` +
                `üé≠ –í–∏—Å—Ç–∞–≤–∞: ${ticket.show.performance.title}\n` +
                `üïí –î–∞—Ç–∞ —ñ —á–∞—Å: ${showDate}\n` +
                `üìç –ó–∞–ª: ${ticket.show.hall.hall_number || '–ù–µ–≤—ñ–¥–æ–º–æ'}\n` +
                `üí∫ –ú—ñ—Å—Ü–µ: ${ticket.seat_number}\n` +
                `üóì –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${new Date(ticket.purchase_date).toLocaleDateString('uk-UA')}`;

            await ctx.reply(message);
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–≤–∏—Ç–∫—ñ–≤:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∞—à–∏—Ö –∫–≤–∏—Ç–∫—ñ–≤.');
    }
});


// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –≤–∏—Å—Ç–∞–≤
bot.hears('üé≠ –í–∏—Å—Ç–∞–≤–∏', async (ctx) => {
    try {
        const performances = await Performance.findAll();
        const buttons = performances.map((perf) => 
            Markup.button.callback(perf.title, `performance_${perf.id}`)
        );
        await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –≤–∏—Å—Ç–∞–≤—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π:', Markup.inlineKeyboard(buttons, { columns: 2 }));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤.');
    }
});



// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –≤–∏—Å—Ç–∞–≤—É
bot.action(/performance_(\d+)/, async (ctx) => {
    const performanceId = ctx.match[1];
    try {
        const performance = await Performance.findByPk(performanceId, {
            include: [
                { model: Genre, through: { attributes: [] } },
                { model: Actor, through: { attributes: [] } },
                { model: Show, include: [Hall] }
            ],
        });

        if (!performance) {
            return ctx.reply('–í–∏—Å—Ç–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }

        let message = `üé≠ ${performance.title}\n`;
        message += `üìù –û–ø–∏—Å: ${performance.description || '–ù–µ–º–∞—î –æ–ø–∏—Å—É'}\n`;
        message += `üé¨ –ñ–∞–Ω—Ä–∏: ${performance.genres.map(g => g.name).join(', ') || '–ù–µ–º–∞—î'}\n`;
        message += `üë®‚Äçüé§ –ê–∫—Ç–æ—Ä–∏: ${performance.actors.map(a => `${a.first_name} ${a.last_name}`).join(', ') || '–ù–µ–º–∞—î'}\n`;
        message += `‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${performance.duration} —Ö–≤\n\n`;

        await ctx.replyWithHTML(message);

        if (performance.shows.length > 0) {
            for (const show of performance.shows) {
                console.log(`Show ID: ${show.id}, Price: ${show.price}, Type: ${typeof show.price}, Hall: ${show.hall ? show.hall.hall_number : '–Ω–µ–≤—ñ–¥–æ–º–æ'}`);
            
                const price = typeof show.price === 'number' 
                    ? show.price.toFixed(2) 
                    : (parseFloat(show.price) ? parseFloat(show.price).toFixed(2) : '–Ω–µ–≤—ñ–¥–æ–º–æ');
                
                const hall = show.hall ? show.hall.hall_number : '–Ω–µ–≤—ñ–¥–æ–º–æ';
            
                const showDate = new Date(show.datetime).toLocaleString('uk-UA');
                const showMessage = `üé≠ ${performance.title}\n` +
                                    `üìù –û–ø–∏—Å: ${performance.description || '–ù–µ–º–∞—î –æ–ø–∏—Å—É'}\n` +
                                    `üé¨ –ñ–∞–Ω—Ä–∏: ${performance.genres.map(g => g.name).join(', ') || '–ù–µ–º–∞—î'}\n` +
                                    `üë®‚Äçüé§ –ê–∫—Ç–æ—Ä–∏: ${performance.actors.map(a => `${a.first_name} ${a.last_name}`).join(', ') || '–ù–µ–º–∞—î'}\n` +
                                    `‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${performance.duration} —Ö–≤\n` +
                                    `üïí –î–∞—Ç–∞ —ñ —á–∞—Å: ${showDate}\n` +
                                    `üí∞ –¶—ñ–Ω–∞: ${price} –≥—Ä–Ω\n` +
                                    `üìç –ó–∞–ª: ${hall}\n`;

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
                const bookingLink = "https://uakino.me/";
                const inlineKeyboard = {
                    inline_keyboard: [
                        [{ text: "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏", url: bookingLink }]
                    ]
                };

                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é
                await ctx.replyWithHTML(showMessage, {
                    reply_markup: inlineKeyboard
                });
            }
            
        } else {
            await ctx.reply('–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è —Ü—ñ—î—ó –≤–∏—Å—Ç–∞–≤–∏.');
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤–∏:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤–∏.');
    }
});





// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤–∏—Å—Ç–∞–≤ –∑–∞ –∂–∞–Ω—Ä–æ–º
bot.hears('üé¨ –ñ–∞–Ω—Ä–∏', async (ctx) => {
    try {
        const genres = await Genre.findAll();
        const buttons = genres.map((g) => Markup.button.callback(g.name, `genre_${g.id}`));
        console.log(genres);  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤
        ctx.reply('–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:', Markup.inlineKeyboard(buttons, { columns: 2 }));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∂–∞–Ω—Ä—ñ–≤.');
    }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∂–∞–Ω—Ä—É
bot.action(/genre_(\d+)/, async (ctx) => {
    const genreId = ctx.match[1];
    try {
        const genre = await Genre.findByPk(genreId);
        if (!genre) {
            return ctx.reply('–ñ–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏—Å—Ç–∞–≤–∏, —â–æ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∂–∞–Ω—Ä—É
        const performances = await Performance.findAll({
            include: {
                model: Genre,
                where: { id: genreId },
            },
        });

        if (performances.length > 0) {
            let message = `–í–∏—Å—Ç–∞–≤–∏ –∂–∞–Ω—Ä—É: ${genre.name}\n\n`;
            const buttons = performances.map((p) => {
                return Markup.button.callback(p.title, `performance_${p.id}`);
            });

            // –í–∏–≤–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤–∏—Å—Ç–∞–≤–∏
            ctx.reply('–ó–∞ —Ü–∏–º –∂–∞—Ä–æ–º —î —Ç–∞–∫—ñ –≤–∏—Å—Ç–∞–≤–∏:', Markup.inlineKeyboard(buttons, { columns: 2 }));
        } else {
            ctx.reply(`–î–ª—è –∂–∞–Ω—Ä—É "${genre.name}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≤–∏—Å—Ç–∞–≤–∏.`);
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤ –∑–∞ –∂–∞–Ω—Ä–æ–º.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤–∏—Å—Ç–∞–≤ –ø–æ –¥–∞—Ç—ñ
bot.hears('üìÖ –ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ –¥–∞—Ç—ñ', async (ctx) => {
    try {
        const months = [
            '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å',
            '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å', '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å',
            '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
        ];

        const monthButtons = months.map((month, index) =>
            Markup.button.callback(month, `month_2024_${index + 1}`)
        );

        await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:', Markup.inlineKeyboard(monthButtons, { columns: 3 }));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ –ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ –¥–∞—Ç—ñ:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è
bot.action(/month_2024_(\d+)/, async (ctx) => {
    const month = ctx.match[1]; // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä –º—ñ—Å—è—Ü—è
    const year = 2024;

    try {
        const daysInMonth = new Date(year, month, 0).getDate(); // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É –≤–∏–±—Ä–∞–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ

        const dayButtons = Array.from({ length: daysInMonth }, (_, i) =>
            Markup.button.callback(`${i + 1}`, `day_${year}_${month}_${i + 1}`)
        );

        await ctx.reply(`–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è ${new Date(year, month - 1).toLocaleString('uk-UA', { month: 'long' })}:`, 
            Markup.inlineKeyboard(dayButtons, { columns: 7 })
        );
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥–Ω—ñ–≤.');
    }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–Ω—è
bot.action(/day_(\d+)_(\d+)_(\d+)/, async (ctx) => {
    const [year, month, day] = ctx.match.slice(1, 4);

    try {
        const selectedDate = new Date(year, month - 1, day);
        const shows = await Show.findAll({
            where: {
                datetime: {
                    [Sequelize.Op.gte]: selectedDate,
                    [Sequelize.Op.lt]: new Date(selectedDate.getTime() + 24 * 60 * 60 * 1000),
                },
            },
            include: [Performance, Hall],
        });

        if (shows.length === 0) {
            return ctx.reply(`–ù–∞ ${selectedDate.toLocaleDateString('uk-UA')} –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∏—Å—Ç–∞–≤.`);
        }

        let message = `–í–∏—Å—Ç–∞–≤–∏ –Ω–∞ ${selectedDate.toLocaleDateString('uk-UA')}:\n\n`;
        shows.forEach(show => {
            const performance = show.performance;
            const showTime = new Date(show.datetime).toLocaleTimeString('uk-UA');
            message += `üé≠ ${performance.title}\n` +
                       `üïí –ß–∞—Å: ${showTime}\n` +
                       `üí∞ –¶—ñ–Ω–∞: ${show.price} –≥—Ä–Ω\n` +
                       `üìç –ó–∞–ª: ${show.hall ? show.hall.hall_number : '–Ω–µ–≤—ñ–¥–æ–º–æ'}\n\n`;
        });

        ctx.reply(message);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤ –Ω–∞ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É.');
    }
});




// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ç–æ—Ä—ñ–≤
bot.hears('üë®‚Äçüé§ –ê–∫—Ç–æ—Ä–∏', async (ctx) => {
    try {
        const actors = await Actor.findAll();
        const buttons = actors.map((actor) => Markup.button.callback(`${actor.first_name} ${actor.last_name}`, `actor_${actor.id}`));
        ctx.reply('–û–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–æ—Ä–∞:', Markup.inlineKeyboard(buttons, { columns: 2 }));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–∫—Ç–æ—Ä—ñ–≤.');
    }
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∞–∫—Ç–æ—Ä–∞
bot.action(/actor_(\d+)/, async (ctx) => {
    const actorId = ctx.match[1];
    try {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–∫—Ç–æ—Ä–∞ –∑–∞ id
        const actor = await Actor.findByPk(actorId, {
            include: {
                model: Performance,
                through: { attributes: [] }, // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω—É —Ç–∞–±–ª–∏—Ü—é
            },
        });

        if (!actor) {
            return ctx.reply('–ê–∫—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
        }

        let message = `${actor.first_name} ${actor.last_name} –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É —Ç–∞–∫–∏—Ö –≤–∏—Å—Ç–∞–≤–∞—Ö:\n\n`;

        // –Ø–∫—â–æ –∞–∫—Ç–æ—Ä –º–∞—î –≤–∏—Å—Ç–∞–≤–∏, —Ç–æ –≤–∏–≤–æ–¥–∏–º–æ —ó—Ö
        if (actor.performances.length > 0) {
            actor.performances.forEach((performance) => {
                message += `üé≠ ${performance.title} (—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${performance.duration} —Ö–≤)\n`;
            });
        } else {
            message += '–ê–∫—Ç–æ—Ä –Ω–µ –±–µ—Ä–µ —É—á–∞—Å—Ç—å –≤ –∂–æ–¥–Ω—ñ–π –≤–∏—Å—Ç–∞–≤—ñ.\n';
        }

        ctx.reply(message);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤ –∑–∞ –∞–∫—Ç–æ—Ä–æ–º.');
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π'))
    .catch((err) => console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', err));
