const { Telegraf, Markup } = require('telegraf');
const { Sequelize, DataTypes } = require('sequelize');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const sequelize = new Sequelize('bddvvx5uepfk7vo0almc', 'ual3odet1pi3ftpn', 'yeaGgGxFe0dCTwkhmCdZ', {
    host: 'bddvvx5uepfk7vo0almc-mysql.services.clever-cloud.com',
    dialect: 'mysql',
    port: 3306,
    logging: false, // –í–∏–º–∫–Ω—É—Ç–∏ SQL-–ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—ñ
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
sequelize.authenticate()
    .then(() => console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'))
    .catch((err) => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', err));

// –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
const Performance = sequelize.define('performance', {
    id: { type: DataTypes.BIGINT.UNSIGNED, primaryKey: true, autoIncrement: true },
    title: DataTypes.STRING,
    duration: DataTypes.INTEGER,
    image: DataTypes.STRING,
}, {
    timestamps: false,
});

const Genre = sequelize.define('genre', {
    id: { type: DataTypes.BIGINT.UNSIGNED, primaryKey: true, autoIncrement: true },
    name: DataTypes.STRING,
}, {
    timestamps: false,
});

const Actor = sequelize.define('actor', {
    id: { type: DataTypes.BIGINT.UNSIGNED, primaryKey: true, autoIncrement: true },
    first_name: DataTypes.STRING,
    last_name: DataTypes.STRING,
}, {
    timestamps: false,
});

// –ú–æ–¥–µ–ª—ñ –¥–ª—è –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π
const PerformanceGenre = sequelize.define('performance_genre', {
    performance_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Performance, key: 'id' } },
    genre_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Genre, key: 'id' } }
}, {
    timestamps: false,
});

const PerformanceActor = sequelize.define('performance_actor', {
    performance_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Performance, key: 'id' } },
    actor_id: { type: DataTypes.BIGINT.UNSIGNED, references: { model: Actor, key: 'id' } }
}, {
    timestamps: false,
    tableName: 'performance_actor' // –í–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è —Ç–∞–±–ª–∏—Ü—ñ
});

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π –º—ñ–∂ –º–æ–¥–µ–ª—è–º–∏
Performance.belongsToMany(Genre, { through: PerformanceGenre, foreignKey: 'performance_id' });
Genre.belongsToMany(Performance, { through: PerformanceGenre, foreignKey: 'genre_id' });

Performance.belongsToMany(Actor, { through: PerformanceActor, foreignKey: 'performance_id' });
Actor.belongsToMany(Performance, { through: PerformanceActor, foreignKey: 'actor_id' });

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
const bot = new Telegraf('7355998053:AAFzF4962NSnBzkdLOkcAV1gB0nYq0u6qfk'); // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

// –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
bot.command('start', (ctx) => {
    const menu = Markup.keyboard([
        ['üé≠ –í–∏—Å—Ç–∞–≤–∏', 'üé¨ –ñ–∞–Ω—Ä–∏'],
        ['üë®‚Äçüé§ –ê–∫—Ç–æ—Ä–∏', 'üìÖ –ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ –¥–∞—Ç—ñ'],
    ]).resize();
    ctx.reply('–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–∏—Ö –∫–≤–∏—Ç–∫—ñ–≤! –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:', menu);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –≤–∏—Å—Ç–∞–≤
bot.hears('üé≠ –í–∏—Å—Ç–∞–≤–∏', async (ctx) => {
    try {
        const performances = await Performance.findAll();
        const buttons = performances.map((perf) => 
            Markup.button.callback(perf.title, `performance_${perf.id}`)
        );
        ctx.reply('–û–±–µ—Ä—ñ—Ç—å –≤–∏—Å—Ç–∞–≤—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π:', Markup.inlineKeyboard(buttons, { columns: 2 }));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤.');
    }
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –≤–∏—Å—Ç–∞–≤—É
bot.action(/performance_(\d+)/, async (ctx) => {
    const performanceId = ctx.match[1];
    try {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–∏—Å—Ç–∞–≤—É –∑–∞ ID
        const performance = await Performance.findByPk(performanceId, {
            include: [Actor, Genre], // –í–∫–ª—é—á–∞—î–º–æ –∞–∫—Ç–æ—Ä—ñ–≤ —Ç–∞ –∂–∞–Ω—Ä–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        });

        if (!performance) {
            return ctx.reply('–í–∏—Å—Ç–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }

        let message = `üé≠ ${performance.title}\n`;
        message += `‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${performance.duration} —Ö–≤\n`;
        
        // –Ø–∫—â–æ —î –∞–∫—Ç–æ—Ä–∏
        if (performance.actors.length > 0) {
            message += '\n–ê–∫—Ç–æ—Ä–∏:\n';
            performance.actors.forEach((actor) => {
                message += `${actor.first_name} ${actor.last_name}\n`;
            });
        } else {
            message += '\n–ù–µ–º–∞—î –∞–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –≤–∏—Å—Ç–∞–≤–∏.\n';
        }

        // –Ø–∫—â–æ —î –∂–∞–Ω—Ä–∏
        if (performance.genres.length > 0) {
            message += '\n–ñ–∞–Ω—Ä–∏:\n';
            performance.genres.forEach((genre) => {
                message += `${genre.name}\n`;
            });
        } else {
            message += '\n–ù–µ–º–∞—î –∂–∞–Ω—Ä—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –≤–∏—Å—Ç–∞–≤–∏.\n';
        }

        ctx.reply(message);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤–∏.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤–∏—Å—Ç–∞–≤ –∑–∞ –∂–∞–Ω—Ä–æ–º
bot.hears('üé¨ –ñ–∞–Ω—Ä–∏', async (ctx) => {
    try {
        const genres = await Genre.findAll();
        const buttons = genres.map((g) => Markup.button.callback(g.name, `genre_${g.id}`));
        console.log(genres);  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤
        ctx.reply('–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:', Markup.inlineKeyboard(buttons, { columns: 2 }));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∂–∞–Ω—Ä—ñ–≤.');
    }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∂–∞–Ω—Ä—É
bot.action(/genre_(\d+)/, async (ctx) => {
    const genreId = ctx.match[1];
    try {
        const genre = await Genre.findByPk(genreId);
        if (!genre) {
            return ctx.reply('–ñ–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
        }

        const performances = await Performance.findAll({
            include: {
                model: Genre,
                where: { id: genreId },
            },
        });

        let message = `–í–∏—Å—Ç–∞–≤–∏ –∂–∞–Ω—Ä—É: ${genre.name}\n\n`;
        performances.forEach((p) => {
            message += `üé≠ ${p.title}\n`;
        });

        ctx.reply(message);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤ –∑–∞ –∂–∞–Ω—Ä–æ–º.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ç–æ—Ä—ñ–≤
bot.hears('üë®‚Äçüé§ –ê–∫—Ç–æ—Ä–∏', async (ctx) => {
    try {
        const actors = await Actor.findAll();
        const buttons = actors.map((actor) => Markup.button.callback(`${actor.first_name} ${actor.last_name}`, `actor_${actor.id}`));
        ctx.reply('–û–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–æ—Ä–∞:', Markup.inlineKeyboard(buttons, { columns: 2 }));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–∫—Ç–æ—Ä—ñ–≤.');
    }
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∞–∫—Ç–æ—Ä–∞
bot.action(/actor_(\d+)/, async (ctx) => {
    const actorId = ctx.match[1];
    try {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–∫—Ç–æ—Ä–∞ –∑–∞ id
        const actor = await Actor.findByPk(actorId, {
            include: {
                model: Performance,
                through: { attributes: [] }, // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω—É —Ç–∞–±–ª–∏—Ü—é
            },
        });

        if (!actor) {
            return ctx.reply('–ê–∫—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
        }

        let message = `${actor.first_name} ${actor.last_name} –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É —Ç–∞–∫–∏—Ö –≤–∏—Å—Ç–∞–≤–∞—Ö:\n\n`;

        // –Ø–∫—â–æ –∞–∫—Ç–æ—Ä –º–∞—î –≤–∏—Å—Ç–∞–≤–∏, —Ç–æ –≤–∏–≤–æ–¥–∏–º–æ —ó—Ö
        if (actor.performances.length > 0) {
            actor.performances.forEach((performance) => {
                message += `üé≠ ${performance.title} (—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${performance.duration} —Ö–≤)\n`;
            });
        } else {
            message += '–ê–∫—Ç–æ—Ä –Ω–µ –±–µ—Ä–µ —É—á–∞—Å—Ç—å –≤ –∂–æ–¥–Ω—ñ–π –≤–∏—Å—Ç–∞–≤—ñ.\n';
        }

        ctx.reply(message);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏—Å—Ç–∞–≤ –∑–∞ –∞–∫—Ç–æ—Ä–æ–º.');
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π'))
    .catch((err) => console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', err));
